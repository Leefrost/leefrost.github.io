[{"categories":["Architecture"],"content":"The CDN","date":"2022-09-16","objectID":"/content-delivery-network/","tags":["system-design"],"title":"Content delivery network (CDN)","uri":"/content-delivery-network/"},{"categories":["Architecture"],"content":"A content delivery network (CDN) is a geographically distributed group of servers that work together to provide fast delivery of internet content. Generally, static files such as HTML/CSS/JS, photos, and videos are served from CDN. ","date":"2022-09-16","objectID":"/content-delivery-network/:0:0","tags":["system-design"],"title":"Content delivery network (CDN)","uri":"/content-delivery-network/"},{"categories":["Architecture"],"content":"How does a CDN work? In a CDN, the origin server contains the original versions of the content while the edge servers are numerous and distributed across various locations around the world. To minimize the distance between the visitors and the website’s server, a CDN stores a cached version of its content in multiple geographical locations known as edge locations. Each edge location contains a number of caching servers responsible for content delivery to visitors within its proximity. Once the static assets are cached on all the CDN servers for a particular location, all subsequent website visitor requests for static assets will be delivered from these edge servers instead of the origin, thus reducing origin load and improving scalability. For example, when someone in the UK requests our website which might be hosted in the USA, they will be served from the closest edge location such as the London edge location. This is much quicker than having the visitor make a complete request to the origin server which will increase the latency. ","date":"2022-09-16","objectID":"/content-delivery-network/:1:0","tags":["system-design"],"title":"Content delivery network (CDN)","uri":"/content-delivery-network/"},{"categories":["Architecture"],"content":"Types CDNs are generally divided into two types: ","date":"2022-09-16","objectID":"/content-delivery-network/:2:0","tags":["system-design"],"title":"Content delivery network (CDN)","uri":"/content-delivery-network/"},{"categories":["Architecture"],"content":"Push CDNs Push CDNs receive new content whenever changes occur on the server. We take full responsibility for providing content, uploading directly to the CDN, and rewriting URLs to point to the CDN. We can configure when content expires and when it is updated. Content is uploaded only when it is new or changed, minimizing traffic, but maximizing storage. Sites with a small amount of traffic or sites with content that isn’t often updated work well with push CDNs. Content is placed on the CDNs once, instead of being re-pulled at regular intervals. ","date":"2022-09-16","objectID":"/content-delivery-network/:2:1","tags":["system-design"],"title":"Content delivery network (CDN)","uri":"/content-delivery-network/"},{"categories":["Architecture"],"content":"Pull CDNs In a Pull CDN situation, the cache is updated based on request. When the client sends a request that requires static assets to be fetched from the CDN if the CDN doesn’t have it, then it will fetch the newly updated assets from the origin server and populate its cache with this new asset, and then send this new cached asset to the user. Contrary to the Push CDN, this requires less maintenance because cache updates on CDN nodes are performed based on requests from the client to the origin server. Sites with heavy traffic work well with pull CDNs, as traffic is spread out more evenly with only recently-requested content remaining on the CDN. ","date":"2022-09-16","objectID":"/content-delivery-network/:2:2","tags":["system-design"],"title":"Content delivery network (CDN)","uri":"/content-delivery-network/"},{"categories":["Architecture"],"content":"Disadvantages As we all know good things come with extra costs, so let’s discuss some disadvantages of CDNs: Extra charges: It can be expensive to use a CDN, especially for high-traffic services. Restrictions: Some organizations and countries have blocked the domains or IP addresses of popular CDNs. Location: If most of our audience is located in a country where the CDN has no servers, the data on our website may have to travel further than without using any CDN. ","date":"2022-09-16","objectID":"/content-delivery-network/:3:0","tags":["system-design"],"title":"Content delivery network (CDN)","uri":"/content-delivery-network/"},{"categories":["Architecture"],"content":"Examples Here are some widely used CDNs: Amazon CloudFront Google Cloud CDN Cloudflare CDN Fastly ","date":"2022-09-16","objectID":"/content-delivery-network/:4:0","tags":["system-design"],"title":"Content delivery network (CDN)","uri":"/content-delivery-network/"},{"categories":["Deployment"],"content":"7 good advices to stay in shape with container building","date":"2023-03-12","objectID":"/docker-best-practice/","tags":["docker","containerization"],"title":"7 best practices for building containers","uri":"/docker-best-practice/"},{"categories":["Deployment"],"content":"Development was always a way of evolution. The evolution of modern programming development brings a lot of techniques and requirements - its hard to imagine today’s programming without high-level frameworks, containers, cloud computing or special data storages (even if they are not necessary). Working with some of them, I would like to share small notes about the containerization, especially with Docker containers. Development was always a way of evolution. The evolution of modern programming development brings a lot of techniques and requirements - its hard to imagine today’s programming without high-level frameworks, containers, cloud computing or special data storages (even if they are not necessary). Working with some of them, I would like to share small notes about the containerization, especially with Docker containers. ","date":"2023-03-12","objectID":"/docker-best-practice/:0:0","tags":["docker","containerization"],"title":"7 best practices for building containers","uri":"/docker-best-practice/"},{"categories":["Deployment"],"content":"7 best practices for building containers Kubernetes Engine is a great place to run your workloads at scale. But before being able to use Kubernetes, you need to containerize your applications. You can run most applications in a Docker container without too much hassle. However, effectively running those containers in production and streamlining the build process is another story. There are a number of things to watch out for that will make your security and operations teams happier. This post provides tips and best practices to help you effectively build containers. ","date":"2023-03-12","objectID":"/docker-best-practice/:1:0","tags":["docker","containerization"],"title":"7 best practices for building containers","uri":"/docker-best-practice/"},{"categories":["Deployment"],"content":"1. Package a single application per container A container works best when a single application runs inside it. This application should have a single parent process. For example, do not run PHP and MySQL in the same container: it’s harder to debug, Linux signals will not be properly handled, you can’t horizontally scale the PHP containers, etc. This allows you to tie together the lifecycle of the application to that of the container. ","date":"2023-03-12","objectID":"/docker-best-practice/:1:1","tags":["docker","containerization"],"title":"7 best practices for building containers","uri":"/docker-best-practice/"},{"categories":["Deployment"],"content":"2. Properly handle PID 1, signal handling, and zombie processes Kubernetes and Docker send Linux signals to your application inside the container to stop it. They send those signals to the process with the process identifier (PID) 1. If you want your application to stop gracefully when needed, you need to properly handle those signals. ","date":"2023-03-12","objectID":"/docker-best-practice/:1:2","tags":["docker","containerization"],"title":"7 best practices for building containers","uri":"/docker-best-practice/"},{"categories":["Deployment"],"content":"3. Optimize for the Docker build cache Docker can cache layers of your images to accelerate later builds. This is a very useful feature, but it introduces some behaviors that you need to take into account when writing your Dockerfiles. For example, you should add the source code of your application as late as possible in your Dockerfile so that the base image and your application’s dependencies get cached and aren’t rebuilt on every build. Take this Dockerfile as example: FROM python:3.5 COPY my_code src RUN pip install my_requirements You should swap the last two lines: FROM python:3.5 RUN pip install my_requirements COPY my_code src In the new version, the result of the pip command will be cached and will not be rerun each time the source code changes. ","date":"2023-03-12","objectID":"/docker-best-practice/:1:3","tags":["docker","containerization"],"title":"7 best practices for building containers","uri":"/docker-best-practice/"},{"categories":["Deployment"],"content":"4. Remove unnecessary tools Reducing the attack surface of your host system is always a good idea, and it’s much easier to do with containers than with traditional systems. Remove everything that the application doesn’t need from your container. Or better yet, include just your application in a distroless or scratch image. You should also, if possible, make the filesystem of the container read-only. This should get you some excellent feedback from your security team during your performance review. ","date":"2023-03-12","objectID":"/docker-best-practice/:1:4","tags":["docker","containerization"],"title":"7 best practices for building containers","uri":"/docker-best-practice/"},{"categories":["Deployment"],"content":"5. Build the smallest image possible Who likes to download hundreds of megabytes of useless data? Aim to have the smallest images possible. This decreases download times, cold start times, and disk usage. You can use several strategies to achieve that: start with a minimal base image, leverage common layers between images and make use of Docker’s multi-stage build feature. ","date":"2023-03-12","objectID":"/docker-best-practice/:1:5","tags":["docker","containerization"],"title":"7 best practices for building containers","uri":"/docker-best-practice/"},{"categories":["Deployment"],"content":"6. Properly tag your images Tags are how the users choose which version of your image they want to use. There are two main ways to tag your images: Semantic Versioning, or using the Git commit hash of your application. Whichever your choose, document it and clearly set the expectations that the users of the image should have. Be careful: while users expect some tags —like the “latest” tag— to move from one image to another, they expect other tags to be immutable, even if they are not technically so. For example, once you have tagged a specific version of your image, with something like “1.2.3”, you should never move this tag. ","date":"2023-03-12","objectID":"/docker-best-practice/:1:6","tags":["docker","containerization"],"title":"7 best practices for building containers","uri":"/docker-best-practice/"},{"categories":["Deployment"],"content":"7. Carefully consider whether to use a public image Using public images can be a great way to start working with a particular piece of software. However, using them in production can come with a set of challenges, especially in a high-constraint environment. You might need to control what’s inside them, or you might not want to depend on an external repository, for example. On the other hand, building your own images for every piece of software you use is not trivial, particularly because you need to keep up with the security updates of the upstream software. Carefully weigh the pros and cons of each for your particular use-case, and make a conscious decision. ","date":"2023-03-12","objectID":"/docker-best-practice/:1:7","tags":["docker","containerization"],"title":"7 best practices for building containers","uri":"/docker-best-practice/"},{"categories":null,"content":"About me page","date":"2022-09-11","objectID":"/about/","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":" Sergii Lischuk ","date":"2022-09-11","objectID":"/about/:0:0","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Hi there, I’m Sergii Lischuk, Leefrost 👋 I am doing programming magic since 2010 💬 Ask me anything about .NET / JS development. 📜 Learning Python and Go. 📓 Writing tech articles on Dev.to and on CodeStory.me. 🔥 Passionate in Machine learning / Data analysis / IOT. 🎙️ Working on tech and dev life podcasts (soon!) You can contact with me by: Gmail Internet Explorer Twitter Facebook LinkedIn I am using these on daily basis: Visual Studio Visual Studio Code Docker Git .NET TypeScript GraphQL Angular Node.js Microsoft SQL Server Microsoft Azure Amazon AWS I am challenging in: Codewars HackerRank LeetCode Exercism ","date":"2022-09-11","objectID":"/about/:0:1","tags":null,"title":"About me","uri":"/about/"}]